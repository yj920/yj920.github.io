<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP基础语法]]></title>
    <url>%2F2019%2F03%2F01%2FPHP%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[The Best Language基础语法这是今天课堂上的实验文档 2-1HTML中嵌入PHPPHP可以嵌入HTML中 demo0.php 12345678&lt;!doctype html&gt;&lt;html&gt; &lt;body&gt; &lt;h1&gt;这是一个案例&lt;/h1&gt; &lt;font color="&lt;?php echo 'red';?&gt;"&gt;这是一段文字&lt;?php echo '&lt;/font&gt;';?&gt;&lt;br&gt; &lt;?php /* ?&gt;&lt;b&gt;此句话被注释。&lt;/b&gt;&lt;?php */ ?&gt; &lt;/body&gt;&lt;/html&gt; 2-2交换两个变量的值标题说的很明确了 demo1 1234567891011121314151617181920212223242526272829&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;交换两个变量的值&lt;/title&gt; &lt;style&gt; body&#123;background:#555&#125; h2&#123;text-align:center;color:#fff&#125; .box&#123;width:298px;padding:20px;margin:15px auto;text-align:center;border:2px solid #01FF02;background:#fff&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;交换两个变量的值&lt;/h2&gt; &lt;?php // 定义变量 $a = 10; $b = 20; ?&gt; &lt;div class="box"&gt;交换前：&lt;?php echo '变量 a=' . $a, '，变量 b=' . $b; ?&gt;&lt;/div&gt; &lt;?php // 交换$a与$b的值 $temp = $a; $a = $b; $b = $temp; ?&gt; &lt;div class="box"&gt;交换后：&lt;?php echo '变量 a=' . $a, '，变量 b=' . $b; ?&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2-3单引号与双引号功能差不多，区别在于单引号完全引用，而双引号会转义 demo2 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;单引号与双引号&lt;/title&gt; &lt;style&gt; div&#123;width:260px;height:185px;margin:0px auto;font-size:16px;color:#333;font-weight:bold;padding:20px;border:2px dotted #004cb7&#125; h2&#123;text-align:center;color:#222&#125; .out&#123;background:#f0bfed&#125; .in&#123;background:#fff;opacity:0.8&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;单引号与双引号&lt;/h2&gt; &lt;div class="out"&gt; &lt;div class="in"&gt; &lt;?php // 使用单引号 echo '"Why doesn\'t "this" work?"'; echo '&lt;br&gt;'; echo 'C:\network\tables\\'; echo '&lt;br&gt;'; echo '变量&#123;$a&#125;的值为"abc"'; echo '&lt;br&gt;'; echo '\101BCD'; echo '&lt;hr&gt;'; // 使用双引号 echo "\"Why doesn't \"this\" work?\""; echo '&lt;br&gt;'; echo "C:\\network\\tables\\"; echo '&lt;br&gt;'; echo "变量&#123;\$a&#125;的值为\"abc\""; echo '&lt;br&gt;'; echo "\\101BCD"; ?&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2-4可变变量延伸$hello = &#39;world&#39;;$world = &#39;hello&#39;;那么，$$hello为hello demo3 12345678910111213141516171819202122232425262728293031&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;可变变量延伸&lt;/title&gt; &lt;style&gt; h2&#123;text-align:center;color:#222&#125; .box&#123; margin:20px auto; line-height:35px; border:2px dotted #D60028;padding:0 10px;width:350px&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;可变变量延伸&lt;/h2&gt; &lt;div class="box"&gt; &lt;?php // 实现多重$符号的可变变量 $hello = 'world'; $world = 'hello'; echo '多重$符号：'; echo $world . ' '; echo $$world . ' '; echo $$$world . ' '; echo $$$$world; // 在可变变量中使用&#123;&#125;大括号 $helloworld = 'ok'; $php = 'world'; echo '&lt;br&gt;使用&#123;&#125;大括号：'; echo $&#123;"hello$php"&#125;; ?&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2-5自动类型转换细节数据类型是可以相互转化的 demo4 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;自动类型转换细节&lt;/title&gt; &lt;style&gt; h2&#123;text-align:center;color:#222&#125; .box&#123;width:300px;background-color:#0032C1;margin:3px auto;font-size:18px;font-weight:bold;color:#fff;padding:20px;text-align:left&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;自动类型转换细节&lt;/h2&gt; &lt;div class="box"&gt; &lt;?php // 在此处编写 PHP代码 $foo = '0'; if (is_string($foo)) &#123; echo '$foo是字符串型，值为：' . $foo . '&lt;hr&gt;'; &#125; $foo += 2; if (is_int($foo)) &#123; echo '$foo是整型，值为：' . $foo . '&lt;hr&gt;'; &#125; $foo = $foo + 1.3; if (is_float($foo)) &#123; echo '$foo是浮点型，值为：' . $foo . '&lt;hr&gt;'; &#125; $foo = 5 + "10Number"; if (is_int($foo)) &#123; echo '$foo是整数型，值为，值为：' . $foo . '&lt;hr&gt;'; &#125; $a = 10; $str = "$a"; if (is_string($str)) &#123; echo '$str是字符串型，值为：' . $str . '&lt;hr&gt;'; &#125; if ('ABC' == 0) &#123; echo '转换结果为 true&lt;hr&gt;'; &#125; if ('ABC' == true) &#123; echo '转换结果为 true&lt;hr&gt;'; &#125; if (false == 0) &#123; echo '转换结果为 true&lt;hr&gt;'; &#125; if (0) &#123; echo '转换结果为 true&lt;hr&gt;'; &#125; else &#123; echo '转换结果为 false '; &#125; ?&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2-6浮点数计算问题PHP中浮点数的运算不够精确 demo5 123456789101112131415&lt;?php var_dump(0.9 == (1 - 0.1)); echo '&lt;br&gt;'; var_dump(0.1 == (1 - 0.9)); echo (int)(0.58 * 100); echo 69.1 * 100 - 6910; var_dump(PHP_INT_MAX); echo '&lt;br&gt;'; var_dump(PHP_INT_MAX + 1); echo '&lt;br&gt;'; var_dump(PHP_INT_MAX + 1 - 1); echo '0.12345678901234'; echo '&lt;br&gt;'; echo '0.123456789012345';?&gt; 计算结果： 2-7计算圆的周长和面积 demo6 1234567891011121314151617181920212223242526&lt;?php define('PI', 3.14); $radius = 15; $area = PI * $radius * $radius; $length = 2 * PI * $radius;?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;计算圆的周长和面积&lt;/title&gt; &lt;style&gt; .tbl&#123;height:30px;line-height:30px;color:#f00;margin:0 auto&#125; .tbl th&#123;color:#444;font-size:20px&#125; .tbl td:nth-child(1)&#123;font-weight:bold;color:#444&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table class="tbl"&gt; &lt;tr&gt;&lt;th colspan="2"&gt;计算圆的周长和面积&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;半径：&lt;/td&gt;&lt;td&gt;&lt;?php echo $radius; ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;周长：&lt;/td&gt;&lt;td&gt;&lt;?php echo $length; ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;面积：&lt;/td&gt;&lt;td&gt;&lt;?php echo $area; ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 2-8逻辑运算符短路问题“与”，”或”的逻辑运算。当左边不成立时，”与“运算右边不执行。 demo7 123456789101112131415161718192021222324252627&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;逻辑运算符短路问题&lt;/title&gt; &lt;style&gt; h2&#123;text-align:center;color:#222&#125; .box&#123;width:250px;margin:3px auto;font-size:18px;padding:20px;border:2px dotted #15a0f5;line-height:35px&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;逻辑运算符短路问题&lt;/h2&gt; &lt;div class="box"&gt; &lt;?php $a = 3; echo '执行前：$a=' . $a . ' '; (1 == 2) &amp;&amp; $a = 6; echo '执行后：$a=' . $a; echo '&lt;br&gt;'; $b = 3; echo '执行前：$b=' . $b . ' '; (1 == 2) || $b = 6; echo '执行后：$b=' . $b; ?&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2-9星期判断switch语句 demo8 123456789101112131415161718192021222324252627&lt;?php$week = 5;switch ($week) &#123;case 1:echo '星期一';break;case 2:echo '星期二';break;case 3:echo '星期三';break;case 4:echo '星期四';break;case 5:echo '星期五';break;case 6:echo '星期六';break;case 7:echo '星期天';break;default:echo '输入的数字不正确...';&#125; 2-10删除变量及判断变量是否存在isset()和unset()函数 demo9 123456&lt;?php $str = 'Hello'; var_dump(isset($str)); var_dump(isset($abc)); unset($str); var_dump(isset($str)); 2-11访问字符串中的字符通过$str[index]访问字符串中的字符 demo10 1234567&lt;?php $str = 'Hello'; echo '第1个字符为：', $str[0], '&lt;br&gt;'; echo '第2个字符为：', $str[1], '&lt;br&gt;'; echo '第3个字符为：', $str[2], '&lt;br&gt;'; echo '第5个字符', isset($str[4]) ? '存在' : '不存在', '&lt;br&gt;'; echo '第6个字符', isset($str[5]) ? '存在' : '不存在'; 2-12打印实心菱形 demo11 12345678910111213141516171819202122&lt;?php $a = 5; for ($i = 1; $i &lt;= $a; ++$i) &#123; for ($b = 1; $b &lt;= $a - $i; ++$b) &#123; echo '&amp;nbsp;'; &#125; for ($c = 1;$c &lt;= ($i - 1) * 2 + 1; ++$c) &#123; echo '*'; &#125; echo '&lt;br&gt;'; &#125; //下半部分 for ($i = $a -1; $i &gt;= 1; --$i) &#123; for ($b = 1; $b &lt;= $a -$i; ++$b) &#123; echo '&amp;nbsp;'; &#125; for ($c = 1; $c &lt;= ($i -1) * 2 + 1; ++$c) &#123; echo '*'; &#125; echo '&lt;br&gt;'; &#125; ?&gt; 2-13打印空心菱形 demo12 12345678910111213for ($line = 1; $line &lt;= 5; ++$line) &#123; for ($pos = 1, $max = 5 - $line; $pos &lt;= $max; ++$pos) &#123; echo '&amp;nbsp;'; &#125; for ($pos = 1, $max = 2 * $line - 1; $pos &lt;= $max; ++$pos) &#123; if ($pos == 1 || $pos == $max) &#123; echo '*'; &#125; else &#123; echo '&amp;nbsp;'; &#125; &#125; echo '&lt;br&gt;'; &#125; 2-14编程求水仙花数 demo13 12345678for ($i = 100; $i &lt; 1000; ++$i) &#123; $hundreds = floor($i / 100); $tens = floor($i / 10) % 10; $ones = floor($i % 10); if (pow($hundreds, 3) + pow($tens, 3) + pow($ones, 3) == $i) &#123; echo $i . ' '; &#125;&#125; 2-15计算红白黑球个数 demo14 1234567for ($r = 1; $r &lt;= 24; ++$r) &#123; $w = 25 - $r; $b = 28 - $r; if ($w + $b == 31) &#123; echo "白球=$w 黑球=$b 红球=$r"; &#125;&#125; 2-16输出隔行变色的表格将奇数行设置颜色 demo15 1234567891011121314151617181920212223242526272829303132&lt;?php for ($i = 1; $i &lt;= 5; ++$i) &#123; if($i % 2 == 0) &#123; echo '&lt;tr bgcolor="green"&gt;&lt;td&gt;奇数行&lt;/td&gt;'; &#125; else &#123; echo '&lt;tr&gt;&lt;td&gt;偶数行&lt;/td&gt;'; &#125; echo '&lt;td&gt;'.$i.'&lt;/td&gt;&lt;/tr&gt;'; &#125; ?&gt; &lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;输出隔行换色的表格&lt;/title&gt; &lt;style&gt; h1&#123;font-size:20px;text-align:center&#125; td&#123;border:1px solid #222;padding:5px&#125; th&#123;padding-bottom:10px&#125; .tbl&#123;border-collapse:collapse;text-align:center;margin:0 auto&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;表格隔行换色&lt;/h1&gt; &lt;table class="tbl"&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass控制语句]]></title>
    <url>%2F2019%2F02%2F23%2FSass%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[@if@if语句有这么几种 @if{语句} @if{语句}@else{语句} @if{语句}@else if{语句} 1234567891011121314151617181920@mixin checkColor($width)&#123; @if ($width&gt;500px)&#123; color:red; &#125; @else if($width&gt;100px)&#123; color:blue; &#125; @else&#123; color:green; &#125;&#125;.dic0&#123; @include checkColor(50px);&#125;.div1&#123; @include checkColor(200px);&#125;.div2&#123; @include checkColor(5000px);&#125; 编译后的CSS：1234567891011.dic0 &#123; color: green;&#125;.div1 &#123; color: blue;&#125;.div2 &#123; color: red;&#125; @for@for也有这么几种： @for $i from &lt;start&gt; through &lt;end&gt; @for $i from &lt;start&gt; to &lt;end&gt; 1234567891011121314@for $i from 1 through 3&#123; .item-#&#123;$i&#125; &#123; width:(10px * $i); &#125;&#125;@for $i from 1 to 3&#123; .border-#&#123;$i&#125; &#123; border:#&#123;$i&#125;px solid red; &#125;&#125; 编译后的CSS：12345678910111213141516171819.item-1 &#123; width: 10px;&#125;.item-2 &#123; width: 20px;&#125;.item-3 &#123; width: 30px;&#125;.border-1 &#123; border: 1px solid red;&#125;.border-2 &#123; border: 2px solid red;&#125; 由此可见”through”包括了”end”，但”to”不包括”end” @while12345678$i:3;@while ($i&gt;0)&#123; .item-#&#123;$i&#125; &#123; width: (10px*$i); &#125; $i : ($i - 1);&#125; 编译后的CSS：1234567891011.item-3 &#123; width: 30px;&#125;.item-2 &#123; width: 20px;&#125;.item-1 &#123; width: 10px;&#125; @each@each也是一种循环，遍历一个列表。用法：@each $var in &lt;list&gt;1234567$list:logo,banner,btn;@each $var in $list&#123; .#&#123;$var&#125;-img &#123; background-image:url("images/#&#123;$var&#125;.png"); &#125;&#125; 编译后的CSS：1234567891011.logo-img &#123; background-image: url("images/logo.png");&#125;.banner-img &#123; background-image: url("images/banner.png");&#125;.btn-img &#123; background-image: url("images/btn.png");&#125;]]></content>
      <categories>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>Sass</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass代码复用]]></title>
    <url>%2F2019%2F02%2F23%2FSass%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%2F</url>
    <content type="text"><![CDATA[继承在Sass中使用@extend来实现样式的继承 1234567.div&#123; border:1px solid red;&#125;.div0&#123; color:blue; @extend .div;&#125; 编译后的CSS：1234567.div, .div0 &#123; border: 1px solid red;&#125;.div0 &#123; color: blue;&#125; 占位符在上面的例子中，如果编译后不要”.div”怎么办？使用占位符%placeholder，编译后的代码里便不包含基类。1234567891011%div&#123; border:1px solid red;&#125;.div0&#123; color:blue; @extend %div;&#125;.div1&#123; color:green; @extend %div;&#125; 编译后的CSS：1234567891011.div1, .div0 &#123; border: 1px solid red;&#125;.div0 &#123; color: blue;&#125;.div1 &#123; color: green;&#125; 如果无需保留基类，可以使用%placeholder。 混合宏Sass中混合宏类似于程序中的函数。用@mixin定义，用 @include调用123456@mixin div&#123; border:1px solid red;&#125;.div&#123; @include div;&#125; 编译后的CSS：123.div&#123; border:1px solid red;&#125; 还可以定义带默认参数及多个参数的混合宏 带默认参数123456789101112@mixin div($color:blue)&#123; background-color:$color;&#125;.div0&#123; @include div;&#125;.div1&#123; @include div(red);&#125;.div2&#123; @include div(green);&#125; 编译后的CSS：1234567891011.div0 &#123; background-color: blue;&#125;.div1 &#123; background-color: red;&#125;.div2 &#123; background-color: green;&#125; 带多个参数1234567891011@mixin div($color,$width,$height)&#123; background-color:$color; width:$width; height:$height;&#125;.div0&#123; @include div(red,100px,100px);&#125;.div1&#123; @include div(yellow,200px,150px);&#125; 编译后的CSS：1234567891011.div0 &#123; background-color: red; width: 100px; height: 100px;&#125;.div1 &#123; background-color: yellow; width: 200px; height: 150px;&#125; 总结 方法 声明方法 调用方法 继承 .class @extend 占位符 %placeholder @extend 混合宏 @mixin @include 使用继承和混合宏都可以提高开发效率，但使用混合宏会使代码冗余，而使用继承不会。]]></content>
      <categories>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass基本运算]]></title>
    <url>%2F2019%2F02%2F22%2FSass%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[CSS目前只有cls()函数可以进行运算，Sass可以像程序一样进行计算，但是与程序相比还是有些不同 加减法1234div&#123; width:(100px+50px); height:(100px-50px);&#125; 编译后的CSS：1234div &#123; width: 150px; height: 50px;&#125; 在加减法运算中需要单位相同，否则会报错，例如123div&#123; width:(100px+50em);&#125; 错误信息Incompatible units: &#39;em&#39; and &#39;px&#39;. 乘法相比于加减法，乘法运算中只能有一个值带单位，例如：123div&#123; width:(100px*2);&#125; 编译后的CSS：123div&#123; width:200px;&#125; 如果上面的2也带有单位，如2px，则会报错200px*px isn&#39;t a valid CSS value. 除法/符号在CSS中已经作为一种符号了，所以在Sass中，不能直接使用/来做除法12345678$m:100px;.div&#123; width:100px/2;/*不是除法*/ height:(100px/2px);/*使用小括号*/ margin-top:100px/2+100;/*使用加号*/ margin-right:round(1.5)/2;/*使用函数*/ margin-bottom:$m/2;/*使用变量*/&#125; 编译后的CSS：123456789101112.div &#123; width: 100px/2; /*不是除法*/ height: 50; /*使用小括号*/ margin-top: 150px; /*使用加号*/ margin-right: 1; /*使用函数*/ margin-bottom: 50px; /*使用变量*/&#125; 如果除法运算两边都带有单位，那么编译后就没有单位 字符运算在Sass中用+符合连接字符。如果左边的字符有引号，编译后的字符也有引号；如果左边的字符没引号，编译后的字符也没引号12345div::before&#123; content: "Hello" + World; font:sans- + "serif";&#125; 编译后的CSS：1234div::before &#123; content: "HelloWorld"; font: sans-serif;&#125; 颜色运算颜色的计算是按红黄蓝分段计算的1234div&#123; color:#010203 + #040506; background-color:#123123*2;&#125; 编译后的CSS：1234div&#123; color:#050709; background-color:#246246;&#125; 计算#010203+#040506的方法为01+04,02+05,03+06,结果为#050709]]></content>
      <categories>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass基础语法]]></title>
    <url>%2F2019%2F02%2F21%2FSass%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[变量声明变量像这样声明变量$color:red;，以$符号开头，例如：1234$color:red;div&#123; color:$color;&#125; 编译后的CSS：123div &#123; color: red;&#125; 默认变量将一个变量甚至为默认变量主要在变量值的后面加一个!default即可。若需要更改默认值，重新赋值就行。默认变量在组件化开发中非常有效。12345678$color:red !default;.div0&#123; $color:blue; color:$color;&#125;.div1&#123; color:$color;&#125; 编译后的CSS：123456.div0 &#123; color: blue;&#125;.div1 &#123; color: red;&#125; 变量的作用域像程序一样，sass也有作用域。1234567891011$color:red; //定义全局变量body&#123; div&#123; color:$color; //调用全局变量 &#125; $color:blue; //定义局部变量 p&#123; color:$color; //调用局部变量 &#125; &#125; 编译后的CSS：123456body div &#123; color: red;&#125;body p &#123; color: blue;&#125; 数据类型数字字符串字符串又分为有引号的字符串和无引号的字符串1234567891011121314$url:"img/demo.png";$text:"Hello";$width:100px;$height:200px;div&#123; background-image:url($url); width:$width; height:$height;&#125;div:hover&#123; content:$text;&#125; 编译后的CSS：12345678div &#123; background-image: url("img/demo.png"); width: 100px; height: 200px;&#125;div:hover &#123; content: "Hello";&#125; 布尔值布尔值有两种：true和false12345678910111213$a:0;$b:0;div&#123; @if($a!=$b) &#123; display:block; &#125; @else &#123; display:none; &#125;&#125; 编译后的CSS：123div &#123; display: none;&#125; 颜色值 关键字颜色值 十六进制颜色值 RGB颜色值 HSL颜色值 1234567$color:#FFFFFF;$bgColor:red;div&#123; color:$color; background-color:$bgColor;&#125; 编译后的CSS：1234div &#123; color: #FFFFFF; background-color: red;&#125; 值列表值列表可以包含多个值，也可以包含“子列表”12345$border:1px solid red;div&#123; border:$border;&#125; 编译后的CSS：12345div&#123; border:1px solid red;&#125; Sass还对此提供了很多内置函数 nullMap值123456$name:( key0:value0; key1:value; ......); Map值与JSON值非常类似，Sass也对Map值提供了许多内置函数。 其他注释 //注释内容，类似CSS的注释 /*注释内容*/，类似JavaScript的注释 12345//注释内容/*注释内容*/p&#123; color:red;&#125; 1234/*注释内容*/p&#123; color:red;&#125; 插值用法：#{变量},例如：12345$border:border;$color:red;div&#123; #&#123;$border&#125;:1px solid #&#123;$color&#125;;&#125; 编译后的CSS：123div&#123; border:1px solid red;&#125;]]></content>
      <categories>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>Sass</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass的介绍与使用]]></title>
    <url>%2F2019%2F02%2F17%2FSass%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Sass介绍 Sass官网 Sass 是一门高于 CSS 的元语言，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表。 Sass是功能最为强大、最成熟、并且是最为流行的CSS预处理器。那么，什么是预处理器呢？CSS是一种描述性语言，通过预处理器，可以让CSS像JavaScript一样以“编程”的方式来写CSS。比如，可以在CSS中定义变量、函数、程序…使得编写的CSS代码更简洁，更易于维护。 其他的CSS预处理器语言比如 Less Stylus 使用Sass安装RubySass是用Ruby编写的，所以需要先安装Ruby对应的版本。安装时需要勾选Add Ruby executables to your PATH这项，否则编译时找不到Ruby环境。 安装Sass通过命令行安装打开Ruby命令行，使用以下命令：1gem install sass 本地安装先下载Sass安装包，然后在命令行输入：1gem install &lt;安装包的路径&gt; 然后回车即可。 淘宝镜像安装移除默认源：gem sources --remove https://rubygems.org/添加淘宝源：gem sources -a https://ruby.taobao.org/查看是否是淘宝源：gem sources -l若返回结果为：12*** CURRENT SOURCES ***https://ruby.taobao.org 再输入gem install sass进行安装。 Sass更新查看Sass版本1sass -v 更新Sass1gem update sass 如果显示Nothing to update则表示已是最新版本 卸载Sass1gem uninstall sass 在线编辑 推荐一个网站https://www.sassmeister.com/]]></content>
      <categories>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Less入门]]></title>
    <url>%2F2019%2F02%2F08%2FLess%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[前言介绍 Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。 Less is More, Than CSS 推荐网站 Less官网 Less中文网 Bootstrap上Less介绍 环境搭建Node.js环境中使用12npm install -g less&gt;lessc styles.less styles.css 浏览器环境中使用1. 引入.less文件1&lt;link rel="stylesheet/less" type="text/css" href="styles.less" /&gt; 2. 引入less.js文件或使用CDN1&lt;script src="//cdnjs.cloudflare.com/ajax/libs/less.js/3.8.1/less.min.js" &gt;&lt;/script&gt; 使用工具推荐一个比较好的编辑器Koala 语法一、变量变量用@变量:值声明 less 123456789@width:100px;@height:100px;@color:#ff0000;div &#123; width:@width; height:@height; background-color:@color;&#125; 编译后的CSS 12345div &#123; width: 100px; height: 100px; background-color: #ff0000;&#125; 二、混合基本混合 less 12345678.public&#123; width:100px; height:100px;&#125;div &#123; .public; background-color:#ff0000;&#125; 编译后的CSS 123456789.public &#123; width: 100px; height: 100px;&#125;div &#123; width: 100px; height: 100px; background-color: #ff0000;&#125; 带参数的混合 less 1234567891011.public(@width,@height,@color)&#123; width:@width; height:@height; background-color:@color;&#125;.div1 &#123; .public(100px,100px,#ff0000);&#125;.div2&#123; .public(200px,200px,#0000ff);&#125; 编译后的CSS 12345678910.div1 &#123; width: 100px; height: 100px; background-color: #ff0000;&#125;.div2 &#123; width: 200px; height: 200px; background-color: #0000ff;&#125; 三、嵌套 less 12345678910.ul&#123; width:100px; height:100px; .li&#123; color:red; &amp;:hover&#123; color:blue; &#125; &#125;&#125; &amp;符号表示其上一级选择器 编译后的CSS12345678910.ul &#123; width: 100px; height: 100px;&#125;.ul .li &#123; color: red;&#125;.ul .li:hover &#123; color: blue;&#125; 四、运算 less 1234567891011121314151617@width:100px;@height:100px;.a&#123; width:@width; height:@height; background-color:red;&#125;.b&#123; width:@width*2; height:@height*2; background-color:blue;&#125;.c&#123; width:@width+50; height:@height+80; background-color:yellow;&#125; 编译后的CSS 123456789101112131415.a &#123; width: 100px; height: 100px; background-color: red;&#125;.b &#123; width: 200px; height: 200px; background-color: blue;&#125;.c &#123; width: 150px; height: 180px; background-color: yellow;&#125; 五、@arguments@arguments包含了所有传递进来的参数 less 123456.style(@w:10px,@c:red,@b:solid)&#123; border:@arguments;&#125;.div&#123; .style();&#125; 编译后的CSS 123.div &#123; border: 10px #ff0000 solid;&#125; 也可以带有参数，例如 less 123456.style(@w:10px,@c:red,@b:solid)&#123; border:@arguments;&#125;.div&#123; .style(20px,blue);&#125; 编译后的CSS 123.div &#123; border: 20px #0000ff solid;&#125; 六、其他注释 /*会被编译的注释*/ //不会被编译的注释 避免编译用法：~&#39;避免编译的内容&#39;]]></content>
      <categories>
        <category>Less</category>
      </categories>
      <tags>
        <tag>Less</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery介绍与使用]]></title>
    <url>%2F2019%2F02%2F01%2FjQuery%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[简单介绍jQuery： jQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。 jQuery 很容易学习。 安装jQuery：进入jQuery官网，下载jQuery库，然后在html页面中引用。例如：123&lt;head&gt;&lt;script src="jquery-3.3.1.js"&gt;&lt;/script&gt;&lt;/head&gt; 另外，jquery.js文件无压缩，用于测试和学习；jquery.min.js文件已压缩，用于实际的网站。 使用CDN引用：如果不想下载jQuery文件，可以使用这些CDN， 谷歌CDN：123&lt;head&gt;&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;&lt;/head&gt; 微软CDN：123&lt;head&gt;&lt;script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.js"&gt;&lt;/script&gt;&lt;/head&gt; 百度CDN：123&lt;head&gt;&lt;script src="https://apps.bdimg.com/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;&lt;/head&gt; 官方CDN：123&lt;head&gt;&lt;script src="https://code.jquery.com/jquery-3.3.1.js"&gt;&lt;/script&gt;&lt;/head&gt; 等等…… 用户访问其他网站时可能已经加载过jQuery，在访问您的页面是会从缓存中加载jQuery，提高加载速度。]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2019%2F01%2F30%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[Markdown是一种轻量级的标记语言，使用普通的文本编辑器，通过简单的标记语法，就可以实现漂亮的排版，被越来越多的写作爱好者、程序员所使用。Markdown自成格式，不依赖任何编辑器，且易于传播，其语法十分简单，通过几分钟的简单学习，就可以实现基本的排版，然后专注于码字。 标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 只有六级标题哦 列表无序列表123- 列表一- 列表二- 列表三 有序列表1231. 列表一2. 列表二3. 列表三 强调 **这样加粗** 粗体文字 *这样变斜*斜体文字 分割线使用---或***可以添加分割线 引用内容前加&gt;,如: 引用内容 代码片段行内代码将代码放在`符号对之间可以实现行内代码,如:print(HelloWord) 块状代码```(程序语言) 代码内容 ``` 程序语言例如Python,可以实现代码高亮,如:123def sayHello(): return print("HelloWord")sayHello() 表格1234一|二|三--:|:--:|:--111|222|3331|2|3 一 二 三 111 222 333 1 2 3]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
